// Generated by gencpp from file planning/LTP_Plan.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_LTP_PLAN_H
#define PLANNING_MESSAGE_LTP_PLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct LTP_Plan_
{
  typedef LTP_Plan_<ContainerAllocator> Type;

  LTP_Plan_()
    : pos_x_list()
    , pos_y_list()
    , vel_x_list()
    , vel_y_list()  {
    }
  LTP_Plan_(const ContainerAllocator& _alloc)
    : pos_x_list(_alloc)
    , pos_y_list(_alloc)
    , vel_x_list(_alloc)
    , vel_y_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pos_x_list_type;
  _pos_x_list_type pos_x_list;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pos_y_list_type;
  _pos_y_list_type pos_y_list;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vel_x_list_type;
  _vel_x_list_type vel_x_list;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vel_y_list_type;
  _vel_y_list_type vel_y_list;





  typedef boost::shared_ptr< ::planning::LTP_Plan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::LTP_Plan_<ContainerAllocator> const> ConstPtr;

}; // struct LTP_Plan_

typedef ::planning::LTP_Plan_<std::allocator<void> > LTP_Plan;

typedef boost::shared_ptr< ::planning::LTP_Plan > LTP_PlanPtr;
typedef boost::shared_ptr< ::planning::LTP_Plan const> LTP_PlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::LTP_Plan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::LTP_Plan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::LTP_Plan_<ContainerAllocator1> & lhs, const ::planning::LTP_Plan_<ContainerAllocator2> & rhs)
{
  return lhs.pos_x_list == rhs.pos_x_list &&
    lhs.pos_y_list == rhs.pos_y_list &&
    lhs.vel_x_list == rhs.vel_x_list &&
    lhs.vel_y_list == rhs.vel_y_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::LTP_Plan_<ContainerAllocator1> & lhs, const ::planning::LTP_Plan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::LTP_Plan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::LTP_Plan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::LTP_Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::LTP_Plan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::LTP_Plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::LTP_Plan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::LTP_Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65ed2aaf51836053f56cfd7ad4d3b5d0";
  }

  static const char* value(const ::planning::LTP_Plan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65ed2aaf51836053ULL;
  static const uint64_t static_value2 = 0xf56cfd7ad4d3b5d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::LTP_Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/LTP_Plan";
  }

  static const char* value(const ::planning::LTP_Plan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::LTP_Plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pos_x_list\n"
"float32[] pos_y_list\n"
"float32[] vel_x_list\n"
"float32[] vel_y_list\n"
;
  }

  static const char* value(const ::planning::LTP_Plan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::LTP_Plan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x_list);
      stream.next(m.pos_y_list);
      stream.next(m.vel_x_list);
      stream.next(m.vel_y_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LTP_Plan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::LTP_Plan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::LTP_Plan_<ContainerAllocator>& v)
  {
    s << indent << "pos_x_list[]" << std::endl;
    for (size_t i = 0; i < v.pos_x_list.size(); ++i)
    {
      s << indent << "  pos_x_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos_x_list[i]);
    }
    s << indent << "pos_y_list[]" << std::endl;
    for (size_t i = 0; i < v.pos_y_list.size(); ++i)
    {
      s << indent << "  pos_y_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos_y_list[i]);
    }
    s << indent << "vel_x_list[]" << std::endl;
    for (size_t i = 0; i < v.vel_x_list.size(); ++i)
    {
      s << indent << "  vel_x_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_x_list[i]);
    }
    s << indent << "vel_y_list[]" << std::endl;
    for (size_t i = 0; i < v.vel_y_list.size(); ++i)
    {
      s << indent << "  vel_y_list[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_y_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_LTP_PLAN_H
